# Menu.py
# P√°gina inicial - "Previs√£o & PCP"
# Rodar: streamlit run Menu.py

from __future__ import annotations
from pathlib import Path
import streamlit as st

st.set_page_config(page_title="Previs√£o & PCP", page_icon="üß≠", layout="wide")

# ======================================================
# üîí 1) NAVEGA√á√ÉO SEGURA (EVITA ERROS DE CAMINHO)
# ======================================================

def first_existing(paths: list[str]) -> str | None:
    """Retorna o primeiro caminho existente na lista."""
    for p in paths:
        if Path(p).exists():
            return p
    return None

missing_msgs = []

HOME_PAGE   = "Menu.py"
UPLOAD_PAGE = first_existing(["pages/01_Upload.py", "pages/01_upload.py"])
SERIE_PAGE  = first_existing(["pages/02_Serie_Temporal.py"])
ROBUST_PAGE = first_existing(["pages/03_Analise_Detalhada.py"])
PREV_PAGE   = first_existing(["pages/04_Previsao.py", "pages/03_Previsao.py"])
MPS_PAGE    = first_existing(["pages/05_MPS.py", "pages/03_MPS.py", "pages/03_mps.py"])

if not UPLOAD_PAGE: missing_msgs.append("‚Ä¢ Passo 1 (Upload) n√£o encontrado.")
if not SERIE_PAGE:  missing_msgs.append("‚Ä¢ Passo 2 (S√©rie Temporal) n√£o encontrado.")
if not PREV_PAGE:   missing_msgs.append("‚Ä¢ Passo 3 (Previs√£o) n√£o encontrado.")
if not MPS_PAGE:    missing_msgs.append("‚Ä¢ Passo 4 (MPS) n√£o encontrado.")

# Define o menu lateral seguro
NAV = st.navigation(
    pages=[
        st.Page(HOME_PAGE,  title="In√≠cio",           icon="üß≠"),
        *( [st.Page(UPLOAD_PAGE, title="Upload", icon="üì§")] if UPLOAD_PAGE else [] ),
        *( [st.Page(SERIE_PAGE,  title="S√©rie Temporal", icon="üìà")] if SERIE_PAGE else [] ),
        *( [st.Page(ROBUST_PAGE, title="An√°lise Detalhada", icon="üß™")] if ROBUST_PAGE else [] ),
        *( [st.Page(PREV_PAGE,   title="Previs√£o", icon="üîÆ")] if PREV_PAGE else [] ),
        *( [st.Page(MPS_PAGE,    title="MPS", icon="üóìÔ∏è")] if MPS_PAGE else [] ),
    ],
    position="sidebar",
    expanded=False,
)

# ======================================================
# üß≠ 2) CONTE√öDO PRINCIPAL (mantido do seu original)
# ======================================================

st.title("üß≠ Previs√£o & PCP")
st.subheader("Integra√ß√£o entre Modelos de Previs√£o e Ferramentas de Planejamento e Controle da Produ√ß√£o (PCP)")

st.markdown("""
### O que √©  
Artefato desenvolvido para **gerar previs√µes de demanda** a partir de modelos **cl√°ssicos e de *Machine Learning***, integrando os resultados √†s ferramentas tradicionais de **PCP**.  
O sistema tamb√©m possibilita a cria√ß√£o de **dashboards executivos** que auxiliam a **an√°lise de resultados** e a **tomada de decis√£o** de forma simples e visual.

---

### Benef√≠cios  
- **Apoio tecnol√≥gico** para gera√ß√£o de previs√µes consistentes e embasadas em m√©todos validados na literatura.  
- **Integra√ß√£o autom√°tica** entre previs√£o, planejamento (MPS/MRP) e indicadores.  
- **Fluxo cont√≠nuo e intuitivo:** üßæ **DADOS ‚Üí ü§ñ PREVER ‚Üí üè≠ PLANEJAR**.  

---

### Principais Outputs  
- üìà **Previs√£o de demanda** para os pr√≥ximos **6, 8 ou 12 meses**, identificando automaticamente o modelo mais adequado √† s√©rie temporal.  
- üóìÔ∏è **MPS** (Master Production Schedule) e üß© **MRP** (Material Requirements Planning) interativos.  
- üìä **Dashboards executivos** para visualiza√ß√£o consolidada dos resultados e apoio √† decis√£o.
""")

st.divider()
st.markdown("### Comece agora")
st.markdown("""
A seguir, envie a **s√©rie temporal** do produto que deseja analisar.  
O sistema processar√° os dados, executar√° os modelos de previs√£o e gerar√° os planos MPS e MRP.
""")

col1, col2 = st.columns([1, 4])
with col1:
    go = st.button("‚û°Ô∏è Iniciar - Passo 1 (Upload da S√©rie Temporal)", type="primary")

if go:
    if UPLOAD_PAGE:
        try:
            st.switch_page(UPLOAD_PAGE)
        except Exception:
            st.info("Se o bot√£o n√£o funcionar automaticamente, use o menu lateral: **Upload**.")
    else:
        st.error("Arquivo de Upload n√£o encontrado. Verifique se '01_Upload.py' existe em /pages.")

# ======================================================
# ‚ö†Ô∏è 3) AVISOS DE CONFIGURA√á√ÉO (arquivos faltando)
# ======================================================
if missing_msgs:
    with st.expander("Avisos de configura√ß√£o", expanded=True):
        for msg in missing_msgs:
            st.warning(msg)


