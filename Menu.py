# Menu.py
# Rodar: streamlit run Menu.py

from __future__ import annotations
import os
import streamlit as st
from packaging import version

# =========================
# CONFIGURA√á√ÉO B√ÅSICA
# =========================
st.set_page_config(page_title="Previs√£o & PCP", page_icon="üß≠", layout="wide")

APP_TITLE = "üß≠ Previs√£o & PCP"
APP_SUBTITLE = "Integra√ß√£o entre Modelos de Previs√£o e Planejamento e Controle da Produ√ß√£o (PCP)"

# Defina os caminhos das p√°ginas (NOMES DE ARQUIVOS SEM ACENTO/EMOJI!)
PAGES_DIR = "pages"
PAGES = [
    {"path": f"{PAGES_DIR}/01_Upload.py",            "title": "Upload",             "icon": "üì§"},
    {"path": f"{PAGES_DIR}/02_Serie_Temporal.py",    "title": "S√©rie Temporal",     "icon": "üìà"},
    {"path": f"{PAGES_DIR}/03_Analise_Detalhada.py", "title": "An√°lise Detalhada",  "icon": "üîé"},
    {"path": f"{PAGES_DIR}/04_Previsao.py",          "title": "Previs√£o",           "icon": "üìà"},
    {"path": f"{PAGES_DIR}/05_MPS.py",               "title": "MPS",                "icon": "üóìÔ∏è"},
    #{"path": f"{PAGES_DIR}/06_MRP.py",               "title": "MRP",                "icon": "üß©"},
    #{"path": f"{PAGES_DIR}/07_Dashboard.py",         "title": "Dashboard",          "icon": "üìä"},
]

# =========================
# VALIDA√á√ïES DE ESTRUTURA
# =========================
missing = [p for p in PAGES if not os.path.exists(p["path"])]
if not os.path.exists(PAGES_DIR):
    st.warning(f"Diret√≥rio `{PAGES_DIR}/` n√£o encontrado ao lado do Menu.py. Crie `{PAGES_DIR}/` e coloque as p√°ginas l√°.")
elif missing:
    st.warning("Algumas p√°ginas configuradas n√£o foram encontradas no disco:")
    for m in missing:
        st.write("‚Ä¢", m["path"])
    st.info("A navega√ß√£o ainda funciona para as p√°ginas existentes, mas confira os nomes/paths acima.")

# =========================
# CABE√áALHO
# =========================
st.title(APP_TITLE)
st.subheader(APP_SUBTITLE)

st.markdown("""
### O que √©  
Artefato desenvolvido para **gerar previs√µes de demanda** a partir de modelos **cl√°ssicos e de *Machine Learning***, integrando os resultados √†s ferramentas tradicionais de **PCP**. O sistema tamb√©m possibilita a cria√ß√£o de **dashboards executivos** que auxiliam a **an√°lise de resultados** e a **tomada de decis√£o** de forma simples e visual.

---

### Benef√≠cios  
- **Apoio tecnol√≥gico** para gera√ß√£o de previs√µes consistentes e embasadas em m√©todos validados na literatura.  
- **Integra√ß√£o autom√°tica** entre previs√£o, planejamento (MPS/MRP) e indicadores.  
- **Fluxo cont√≠nuo e intuitivo:**  üßæ **DADOS ‚Üí ü§ñ PREVER ‚Üí üè≠ PLANEJAR**.  

---

### Principais Outputs  
- üìà **Previs√£o de demanda** para os pr√≥ximos **6, 8 ou 12 meses**, identificando automaticamente o modelo mais adequado √† s√©rie temporal.  
- üóìÔ∏è **MPS** (Master Production Schedule) e üß© **MRP** (Material Requirements Planning) interativos.  
- üìä **Dashboards executivos** para visualiza√ß√£o consolidada dos resultados e apoio √† decis√£o.  
""")

st.divider()

st.markdown("### Comece agora")
st.markdown(
    "A seguir, envie a **s√©rie temporal** do produto que deseja analisar. "
    "O sistema processar√° os dados, executar√° os modelos de previs√£o e gerar√° os planos MPS e MRP."
)

# =========================
# NAVEGA√á√ÉO (com fallback)
# =========================
# Prefer√™ncia: usar st.navigation (Streamlit mais novo)
st_ver = version.parse(st.__version__)
has_navigation = hasattr(st, "navigation")  # dispon√≠vel nas vers√µes mais recentes
has_page_link = hasattr(st, "page_link")    # fallback elegante em vers√µes ~1.24+

# Renderiza navega√ß√£o lateral
def render_sidebar_links():
    with st.sidebar:
        st.header("Navega√ß√£o")
        st.page_link("Menu.py", label="Home", icon="üß≠")
        for pg in PAGES:
            if os.path.exists(pg["path"]):
                st.page_link(pg["path"], label=pg["title"], icon=pg["icon"])

# 1) Se existir st.navigation, registre as p√°ginas (ele mesmo cria o menu)
if has_navigation:
    # Importante: registre SOMENTE as p√°ginas do diret√≥rio /pages para n√£o duplicar a home
    nav_pages = [st.Page(p["path"], title=p["title"], icon=p["icon"]) for p in PAGES if os.path.exists(p["path"])]
    st.navigation(pages=nav_pages)
else:
    # 2) Fallback usando st.page_link na sidebar
    if has_page_link:
        render_sidebar_links()
    else:
        # 3) Fallback "raiz": radio manual para vers√µes bem antigas
        with st.sidebar:
            st.header("Navega√ß√£o")
            choices = ["Home"] + [pg["title"] for pg in PAGES if os.path.exists(pg["path"])]
            choice = st.radio("Ir para:", choices, index=0)
            if choice != "Home":
                # N√£o h√° API nativa; informamos o link para clique
                sel = next(pg for pg in PAGES if pg["title"] == choice)
                st.markdown(f"[Abrir **{sel['title']}**](/?page={sel['path']})")

# =========================
# BOT√ÉO DE A√á√ÉO
# =========================
col1, col2 = st.columns([1, 4])
with col1:
    go = st.button("‚û°Ô∏è Iniciar - Passo 1 (Upload da S√©rie Temporal)", type="primary")

if go:
    # Tente o switch_page se existir (novo) e caia para alternativas
    target = f"{PAGES_DIR}/01_Upload.py"
    try:
        if hasattr(st, "switch_page"):
            st.switch_page(target)
        elif has_page_link:
            # Mostra um link clic√°vel como fallback imediato
            st.success("Vers√£o do Streamlit sem `switch_page`. Clique abaixo para seguir:")
            st.page_link(target, label="Ir para Upload", icon="üì§")
        else:
            # √∫ltimo recurso: sugerir menu lateral
            st.info("N√£o consegui redirecionar automaticamente. Acesse o menu lateral e clique em **Upload**.")
    except Exception as e:
        st.info("Se o bot√£o n√£o funcionar automaticamente, acesse o menu lateral e clique em **Upload**.")
        st.caption(f"(Detalhe t√©cnico: {e})")
